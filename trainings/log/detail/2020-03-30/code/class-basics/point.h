#pragma once

class Point
{
public:
    // discussion to make when someone wants a default ctor:

    // * why is the default value of a point (0,0)?
    // * is this comprehensible? does everyone expect that?
    // * why do we need it?
    Point() : _x(0), _y(0) {}

    Point(int x, int y)
    : _x(x), _y(y) {}

    // note: this would be generated by the compiler. it is completely
    // unnecessary for this simple class which has no pointer members.
    Point(const Point& rhs)
    : _x(rhs._x), _y(rhs._y) {}

    // note: this would be generated by the compiler. it is completely
    // unnecessary for this simple class which has no pointer members.
    Point& operator=(const Point& rhs)
    {
        _x = rhs._x;
        _y = rhs._y;
        return *this;
    }

    int x() const { return _x; }
    int y() const { return _y; }

    void move(const Point& by)
    {
        _x += by.x();
        _y += by.y();
    }

    // see global alternative below, outside of the class
    
    // bool operator==(const Point& rhs) const
    // {
    //     return (_x == rhs._x) && (_y == rhs._y);
    // }

    const Point& operator+=(const Point& rhs)
    {
        _x += rhs.x();
        _y += rhs.y();
        return *this;
    }

    static Point add(const Point& lhs, const Point& rhs)
    {
        // return a temporary object in a hurry
        return Point(lhs._x+rhs._x, lhs._y+rhs._y);
    }

    // alternative implementation of operator+: as a member, operating
    // on this. but should take care to not modify this, simply to not
    // upset users.
    
    // Point operator+(const Point& rhs)
    // {
    //     Point result;
    //     result._x = _x + rhs._x;
    //     result._y = _y + rhs._y;
    //     return result;
    // }

private:
    int _x;
    int _y;
};

Point operator+(const Point& lhs, const Point& rhs)
{
    return Point::add(lhs, rhs);
}

bool operator==(const Point& lhs, const Point& rhs)
{
    return lhs.x() == rhs.x() && lhs.y() == rhs.y();
}
bool operator!=(const Point& lhs, const Point& rhs)
{
    return !operator==(lhs, rhs);
}
