#ifndef __HAVE_THERMOMETER_H__
#define __HAVE_THERMOMETER_H__

#include <iostream>
using namespace std;


class Thermometer
{
public:
    virtual ~Thermometer() {} // DOGMA!!!
    virtual double get_temperature() const = 0; // pure virtual method
                                                // -> class is
                                                // abstract

    Thermometer() {} // need to implement default ctor because that is
                     // not generated by compiler when one defines
                     // *any* ctor in a class.

    // prohibit copy because unwanted. sadly these are ctors, which
    // prevents the compiler from generating the default ctor which we
    // have to define above for that bloody reason.
    Thermometer(const Thermometer&) = delete;
    Thermometer& operator=(const Thermometer&) = delete;
};

class SPIThermometer : public Thermometer
{
public:
    SPIThermometer(unsigned miso, unsigned mosi, unsigned clk, unsigned cs);
    virtual ~SPIThermometer()
    {
        cout << __PRETTY_FUNCTION__ << endl;
    }

    virtual /*=DOGMA*/ double get_temperature() const override;

private:
    unsigned _miso;
    unsigned _mosi;
    unsigned _clk;
    unsigned _cs;
};

class I2CThermometer : public Thermometer
{
public:
    I2CThermometer(unsigned sda, unsigned scl, unsigned addr);
    virtual /*=DOGMA*/ double get_temperature() const override;

private:
    unsigned _sda;
    unsigned _scl;
    unsigned _addr;
};

class MockThermometer : public Thermometer
{
public:
    MockThermometer() : _temp(0) {}
    virtual double get_temperature() const override { return _temp; }
    void set_temperature(double t) { _temp = t; }
private:
    double _temp;
};

#endif
